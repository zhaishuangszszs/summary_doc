类中要开辟堆空间，一般时一个成员变量为指针，构造函数来开辟堆空间并初始化指针。


类中成员函数参数要传函数指针，被传函数要么全局函数声明为友元，要么静态函数，因为静态成员函数无需创建类实例便存在，而非静态成员函数必须实例化类才有该函数。

类中全局函数要访问非静态变量要传this指针。

c语言没有函数重载，通过可变参数实现。

c语言函数要修改外部指针，只能传指针的地址即二级指针。

------------------------------------------------

常量、变量、静态常量（注意区分静态变量）---可以在类内初始化

静态变量 ---不可以在类内初始化，必须类外初始化

------------------------------------------------

c++单例模式就像命名空间的作用差不多，将全局变量和函数组织在一起。
static静态局部变量初始化问题：C++，编译时分配内存 ，（运行时）首次使用时初始化。c语言，编译时分配内存和初始化的。

------------------------------------------------
char *转std::string的一个小陷阱。
通常情况下，我们将char*或者char[]转换成std::string使用的基本都是string的构造函数或者直接转换。当某个char为0x00时候，string默认赋值完成，后续数据不会再拷贝char msg[] = { 0x01,0x02,0x00,0x00,0x20,0x10 };std::string提供了assign方法去赋值，使用这个方法的前提是你必须知道char*的"真正长度"
std::string str5;
str5.assign(msg, 6);

现总结如下：

将char赋值给std::string如果不指定长度，则会默认以\0截断（ASCII码值为0）；如果指定的长度超过char字符串的长度，用std::cout系列的函数输出时，会把不属于该char*之后的内存值打印出来。而对于printf系列的函数来打印std::string时遇到\0也会截断，因而不能完全显示。这点在打印或输出到日志时，这类字符串时需要特别注意。

如果是单个字符和一个字符串赋值给std::string写法是有区别的 —— 对于char，数目是第一个参数，对于char* 数目是第二个参数。

例如，假定ptsr是一个字符串或者字符。如果pstr是一个字符串，那么要写成string(pstr, n)，如果pstr是一个字符，那么要写成string(n, pstr)，而此时string(pstr, n)是一个错误的写法，可能会导致你的程序产生莫名其妙的问题，因为如果pstr是一个负值，负数转换成无符号整数size_t类型，n将非常大，会导致构造字符串时length非常大导致std::string构造时抛出异常。看这两种初始化的构造函数签名：

string (const char* s, size_t n);
string(size_t n, char c);

请注意这个区别！！特别容易想当然地写错。如果pstr对应数值比较小的正数，可能不会产生异常，但其实程序状态也不是你想要的。如果是负数，程序将直接产生异常。抛出：std::length_error 。所以出现这个异常信息，你就要好好检查下你初始化std::string的长度信息了。

------------------------------------------
纯虚函数无法实例化对象
子类继承没有实现对应的纯虚函数也是抽象类。
----------------------------------------------
malloc free 和 new delete区别new 和 delete会调用构造和析构函数。
----------------------------------------------
NULL在c代表空指针，在c++代表0，nullptr代表空指针。
---------------------------------------------------
模板类参数为内置类型：例如vector<int>a(10);int 类型初始化为0，a中包含10个0；
-------------------------------------------------------
delete 一个nullptr指针不会出错，而重复delete一个指针会出错，所以delete后置为nullptr可以避免出错
----------------------------------------------
C++类内可以定义引用数据成员吗？
答案是肯定的，但是必须通过构造函数初始化列表初始化类内的引用！！！
-----------------------------------------------------------------
c++类的类型转换成员函数，可以将对象转换为某些类型（double,int...）
pointer_like class比如智能指针（不能++，--），迭代器(可以++，--用于遍历)[重载*，->]
function_like class[重载（）运算符]，创建对象时（）肯定是构造函数。因为初始化后对象才有其他成员函数，之后对象（）就是运算符重载了。
成员模板一般用来解决继承。
-----------------------------------------
类成员函数有this指针，当类调用成员函数时，传入对象地址，函数this就指向了对象。
----------------------------------------------
动态绑定根据寄存器值得计算来确定函数地址。（动态绑定只能通过指针调用）
静态绑定是直接编译时直接确定函数地址。
-----------------------------------
c++构造函数不能实现多态，静态绑定，父类构造函数调用时此时子类还未创建出来。
-----------------------------------------
A a=10;这个调用的是构造函数，因为a刚创建。a=b,才是操作符重载，拷贝赋值。
-----------------------------------------------------------
//模板别名
using 模板别名（用在模板需要传模板参数）
typedef和using 相比无法带参数。
例如
typedef vector<int> Vec;
--------
template<T>
using Vec=vector<T>;
macro带参数只能以原括号的形式来带。
typename  用来确保模板A::mem中mem是类型名而不是成员变量。
模板模板参数
//类型别名（typedef和uisng一样）
typedef void (fun*)(int,int); fun就是一个函数指针别名
using fun=void (*)(int,int);fun就是一个函数指针别名

---------------------------------------
泛型编程两个原则
模板函数中参数是const引用
函数体中条件判断只用<
---------------------------------------
类模板必须提供类型参数
-----------------------
类虚继承是运行时多态，模板是编译时多态。
模板编译时多态性是在编译期间根据不同的模板参数生成不同的代码，从而实现类似多态性的效果。
--------------------------------------------

class D
{
public:
	void printA()
	{
		cout<<"printA"<<endl;
	}
	virtual void printB()
	{
		cout<<"printB"<<endl;
	}
};
问题：
D *d=NULL;
d->printA();	//正常输出（函数传的this为null）
d->printB();	//报错 d指向NULL，即地址为0x00000000,再去找虚地址指针，肯定是不允许的。
-------------------------------------------------------------------------------
类不能直接调用非静态成员函数（类没有地址，this指针不知道指向什么），变量（不知道那个对象的变量）。
--------------------------------------------------------------------------------------
