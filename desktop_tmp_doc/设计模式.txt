依赖关系：（需要别的类的方法）
依赖关系通常通过三种方式来实现：
将一个类的对象作为另一个类中方法的参数
在一个类的方法中将另一个类的对象作为其对象的局部变量
在一个类的方法中调用另一个类的静态方法

组合（Composition）关系：
也表示的是一种整体和部分的关系，但是在组合关系中整体对象可以控制成员对象的生命周期，一旦整体对象不存在，成员对象也不存在，整体对象和成员对象之间具有同生共死的关系。
通常在构造函数中实例化（new的方法实例化）

聚合（Aggregation）关系：
表示整体与部分的关系。在聚合关系中，成员对象是整体的一部分，但是成员对象可以脱离整体对象独立存在。
通常在构造函数中实例化（拷贝的方式实例化，或者指针指向已经实例化的对现象）

关联的两个对象之间一般是平等的，聚合则一般是不平等的。（关联聚合也会用到其他类的成员函数但不是依赖）



1.模板方法
一个类有流程框架和相应需要的步骤函数，但没实现具体的函数。
模板模式就是使用者根据框架实现自己的具体函数。（虚继承来实现）
2.策略模式
一个类的某个部分（组合模式）比如攻击组件攻击敌人，有很多不同的策略，因此一个攻击组件的指针指向攻击组件的抽象接口。（添加一个中间层）
通过虚继承实现攻击接口的具体攻击策略（子类）。
3.观察者模式
publisher有一个抽象接口，有列表记录订阅者，当有消息通知或者修改时通知订阅者。
抽象类可以实现添加去掉订阅者功能，通知订阅者由不同的publisher具体实现，通过遍历自己的订阅者链表，调用订阅者的更新数据函数来通知每个订阅者。
subscriber有一个抽象类，有关注的发布者列表，当有相应的发布者有消息时会通知自己。
订阅者抽象类可以实现调用发布者的添加删除订阅者函数来关注取消关注发布者（会相互引用），每当有新消息通知时就检查是自己订阅的那个抽象者发布的并修改。
两个抽象类实现添加和删除功能，而发布者的通知函数通过虚继承来实现具体发布者来管理，而订阅者的更新函数通过虚继承来实现具体的订阅者实现。（两个中间层）
4.装饰者模式，一个抽像接口有一些功能函数，但这些函数功能可以变化，通过子类来实现不同的功能，会创建很多子类。
定义一个子类实现简单的功能函数。
定义一个抽象装饰类，该类继承抽象接口和相应的功能函数，并有一个指向抽象接口的指针和一个装饰函数。所谓的装饰函数就是把要装饰的简单子类的指针赋值给自己的指针。
然后装饰接口的子类实现具体功能函数，在功能函数中通过调用简单子类对象的功能函数在加具体的装饰功能来实现装饰。这时装饰对象就有了简单的功能函数并装饰的新的功能。
5.桥接模式
客户端和平台有抽象的接口实现固定的功能。
一个客户端抽象类有平台抽象类的指针，客户端通过虚继承具体实现具体业务，平台也通过虚继承具体实现具体平台。客户端通过指针调用传进去的具体平台的功能函数。



6.工厂模式（简单工厂模式）
一个类里面需要new出的对象需要拓展。有一个抽象工厂指针接受外部传进具体工厂指针初始化。
需要产品时，左边创建抽像产品接口指针，右边指向抽象工厂接口抽象工厂通过虚继让具体子工厂new产品类，实现多态new。
7.抽象工厂模式
一个抽象工厂有着生产相关产品的子工厂成员。通过虚继承实现具体的工厂集团。
方便加新系列，不方便加新对象。
8.原型模式
产品方法（可以没有）和生产方法（克隆）放在一个抽象接口中。
通过继承来实现具体产品样本。通过虚继承克隆生产方法来new深拷贝原型对象并返回。
相当于样品工厂，根据给定样品（样品比较复杂的时候这个方法好）生产克隆品。
9.构造器模式
抽象构造器模式有各个工序得功能函数，通过虚继承实现具体工序函数。有一个指向抽象产品得指针，一般第一个工序来new创建对象（多态new）。
有主管类里面有构造器函数指针，调用构造器的工序函数，根据流程实现具体的对象，然后返回对象指针。
具体用法，new一个具体构造器类，new出主管类，传进构造器指针初始化，带你用主管的建造函数返回出对象。
10单例模式
懒汉模式，饿汉模式
线程安全，双检查锁。
11.享元模式
内在状态（静态数据一般只是用来读）构造共享数据类，不在对象中存储外在状态（可改变数据）， 而是将其传递给依赖于它的一个特殊方法。
一个共享数据类就代表很多个对象。
12门面模式
抽象出接口，接口调用不同对象实现复杂的功能。
13.代理模式
当你希望在无需修改客户代码的前提下于已有类的对象上增加额外行为时。用代理（内含已有类指针）来代表已有类，同一函数中，代理加了新的功能。（和装饰模式有点像）
14.适配器模式
适配器继承目的抽象接口，内含被适配对象指针，适配器内一转换函数通过调用被适配对象功能函数并将数据处理转换为目的接口需要的数据。
15.中介模式
一组群体通过中介建立一个整体。中介有成员队列。交流时发起者调用中介的通知函数并说明通知对象，中介再调用被通知对象的更新消息函数来完成通知。
（和观察者模式很像，不同在于不是发布者发布消息，而是订阅者成员里面对特定成员发布消息。）
16.状态模式
对象组合一个状态抽象类有功能函数，具体的状态类实现具体的功能函数，但状态可以根据传入的数据变化转变为其他状态。（和策略模式像，策略模式不能转换策略）
17.备忘录模式
只有原发器才能产生保存记录对象，记录器进行记录。记录对象只记录日期和状态。通过记录器调用原发器改变状态函数可以回退状态。
18.组合模式
对于组合模式来说，操作这个集合中的任意一个节点的方式都是相同的，所以必须要先定义出单个节点的抽象，在这个抽象类中定义出节点的行为。
19.迭代器模式
遍历不同容器
20.责任链模式
对象组成链模式，具有的功能是可以设置下一个对象和处理请求，对于请求可以处理则自己处理否则传给下一个对象。（请求时可以不从链头开始）
21.命令模式
将命令组合为抽象类，给调用者传入命令对象。具体复杂命令对象组合有执行者可以完成复杂命令。
22.访问者模式（访问者叫已有类抽象功能函数集合更合适。）
已有的抽象类有两个子类A，B。已有类Accept有接受访问者对象的指针。访问者分别实现A，B的某些功能函数，通过虚继承具体的访问者实现具体A，B的某一功能函数。
当A，B要调用某一功能函数，只需传入具体的访问者有A，B两个类的功能函数。而类A里的Accept函数只调用A类的功能函数，并传入this指针，类B同理。从而实现A，B的某一功能函数。

访问者叫已有类抽象功能函数集合更合适。
